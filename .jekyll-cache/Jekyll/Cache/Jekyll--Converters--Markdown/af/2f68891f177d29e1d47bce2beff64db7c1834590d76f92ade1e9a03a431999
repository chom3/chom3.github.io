I"E<h1 id="the-problem">The problem:</h1>

<p>Assuming a string in all lowercase.</p>

<p>Given a string, find the first non-repeating character in it and return the index (or character). If it doesn’t exist, return -1.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>given: abcdabc

Output: 3 or d

</code></pre></div></div>

<h1 id="importance">Importance</h1>

<p>I think the highlight here is to know your ASCII. With all lower case letters, ‘a’ to int is the value 97. ‘z’  is 122. Subtracting any lowercase letter by ‘a’ will give 0-25 as a value. This can help you solve the problem with 0(1) constant space by using an array of size 26.</p>

<h1 id="the-thought-process">The Thought Process</h1>
<p>We need an array the size of all lower case letters (or adjusted if non-lowercase, we can set everything to lower case, etc.)</p>

<p>Iterate through the string and increment any letters in the array that are in the string.</p>

<p>iterate through the string again and any letter that returns the value 1 is our index/letter.</p>

<h1 id="the-solution">The Solution</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public int firstUniqChar(String s){
    int[] letters = new int[26];

    for (int i = 0; i &lt; s.length(); i++){
        letters[s.charAt(i) - 'a']++;
    }

    for (int i = 0; i &lt; s.length(); i++){
        if (letters[s.charAt(i) - 'a'] == 1){
            return i; // return letters[i];
        }
    }

    return -1;
}
</code></pre></div></div>
:ET